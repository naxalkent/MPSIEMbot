import requests
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from tokenseim import access_token

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

bot_token = '***'
chat_id = ***


def send_message(message):
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    payload = {'chat_id': chat_id, 'text': message}
    response = requests.post(url, json=payload)
    return response.json()

def make_api_request():

    url = "https://<IP>/api/v2/incidents/"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    payload = {
        "offset": 0,
        "limit": 1,
        "groups": {
            "filterType": "no_filter"
        },
        "timeFrom": "2020-12-31T21:00:00.000Z",
        "timeTo": None,
        "filterTimeType": "creation",
        "filter": {
            "select": [
                "key",
                "name",
                "category",
                "type",
                "status",
                "created",
                "assigned",
                "severity"
            ],
            "where": "",
            "orderby": [
                {"field": "created", "sortOrder": "descending"},
                {"field": "status", "sortOrder": "ascending"},
                {"field": "severity", "sortOrder": "descending"}
            ]
        },
        "queryIds": ["all_incidents"]
    }

    response = requests.post(url, headers=headers, json=payload, verify=False)

    if response.status_code == 200:
        json_response = response.json()
        return json_response
    else:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è {response.status_code}"

def get_incident_details_by_id(incident_id):
    global current_access_token
    url = f"https://<IP>/api/incidentsReadModel/incidents/{incident_id}"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    response = requests.get(url, headers=headers, verify=False)

    if response.status_code == 200:
        incident_details = response.json()
        #responce_target = incident_details.get("targets", "")
        #result_responce = foreach (target in responce_target){return $_.id + $_.name}
        formatted_details = {
            "<b>ID</b>": incident_details.get("id", ""),
            "<b>–ù–æ–º–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞</b>": incident_details.get("key", ""),
            "<b>–ü—Ä–∞–≤–∏–ª–æ</b>": incident_details.get("name", ""),
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>": incident_details.get("description", ""),
            "<b>–£—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>": incident_details.get("isConfirmed", False),
            "<b>–°—Ç–∞—Ç—É—Å</b>": incident_details.get("status", ""),
            "<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>": incident_details.get("category", ""),
            "<b>–í–∞–∂–Ω–æ—Å—Ç—å</b>": incident_details.get("severity", ""),
            "<b>–¢–∏–ø</b>": incident_details.get("type", ""),
            "<b>–°–æ–∑–¥–∞–Ω</b>": incident_details.get("created", ""),
            "<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω</b>": incident_details.get("detected", ""),
            "<b>–ì—Ä—É–ø–ø–∞</b>": incident_details.get("group", ""),
            "<b>–¶–µ–ª—å</b>": ",\n" .join(extract_names_from_target(incident_details)),
            "<b>–ê—Ç–∞–∫—É—é—â–∏–π</b>": ",\n".join(extract_names_from_attack(incident_details))
        }
        return formatted_details
    else:
        print(f"Error: {response.status_code}")
        return None
def get_incident_events_by_id(incident_id):
    global current_access_token
    url = f"https://<IP>/api/incidents/{incident_id}/events"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    response = requests.get(url, headers=headers, verify=False)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code}")
        return None

def extract_names_from_target(data):
    names_to_send = [asset['name'] for asset in data['targets']['assets']] + [other['name'] for other in data['targets']['others']]
    return names_to_send

def extract_names_from_attack(data):
    names_to_send2 = [asset['name'] for asset in data['attackers']['assets']] + [other['name'] for other in data['attackers']['others']]
    return names_to_send2

def format_incident(incident_data):
    incident_id = incident_data.get("id", "")
    incident_key = incident_data.get("key", "")
    incident_name = incident_data.get("name", "")
    rule = incident_data.get("category", "")
    #target = incident_data.get("targets:assets ", "")
    status = incident_data.get("status", "")
    category = incident_data.get("type", "")
    time = incident_data.get("created", "")

    formatted_output = f"<b>üö®–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç!</b>\n\n<b>ID:</b> <code>{incident_id}</code>\n\n<b>–ù–æ–º–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:</b> {incident_key}\n\n<b>–ü—Ä–∞–≤–∏–ª–æ:</b> {incident_name}\n\n<b>–¢–∏–ø:</b> {rule}\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n<b>–í—Ä–µ–º—è:</b> {time}\n\n"
    return formatted_output
def parse_incident_events_to_string(events):
    event_info = ""

    if events:
        for event in events:
            event_id = event.get("id", "")
            event_type = event.get("type", "")
            event_description = event.get("description", "")
            event_time = event.get("timestamp", "")

            event_info += f"ID —Å–æ–±—ã—Ç–∏—è: {event_id}\n\n"
            event_info += f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}\n\n"
            event_info += f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {event_description}\n\n"
            event_info += f"–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {event_time}\n\n"
            event_info += "------------------------------------------\n\n"
    else:
        event_info = "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞."

    return event_info


def send_message_with_inline_keyboard_and_callback(message):
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    keyboard = {
        "inline_keyboard": [
            [{"text": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback_data": "more_info"}],
            [{"text": "–°–æ–±—ã—Ç–∏—è", "callback_data": "events"}]
        ]
    }
    payload = {
        'chat_id': chat_id,
        'text': message,
        'reply_markup': keyboard,
        'parse_mode': 'HTML'  # –†–∞–∑—Ä–µ—à–∏—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
    }
    response = requests.post(url, json=payload)
    return response.json()


def send_incident_details(chat_id, incident_details):
    formatted_details = "\n–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    for key, value in incident_details.items():
        formatted_details += f"{key}: {value}\n"

    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': formatted_details,
        'parse_mode': 'HTML'  # –†–∞–∑—Ä–µ—à–∏—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    }
    response = requests.post(url, json=payload)
    return response.json()

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    if data == 'more_info':
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
        incident_id = previous_incident_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_details = get_incident_details_by_id(incident_id)
        if incident_details:
            send_incident_details(chat_id, incident_details)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_incident')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text('–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', reply_markup=reply_markup)
        else:
            send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")

    elif data == 'events':
        # –ü–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_id = previous_incident_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_events = get_incident_events_by_id(incident_id)
        if incident_events:
            events_info = parse_incident_events_to_string(incident_events[:5])  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 —Å–æ–±—ã—Ç–∏–π
            send_message(events_info)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_incident')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text('–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–æ–±—ã—Ç–∏—è.', reply_markup=reply_markup)
        else:
            send_message("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")

    elif data == 'back_to_incident':
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —Å–Ω–æ–≤–∞
        formatted_data = format_incident(api_response['incidents'][0])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
        send_message_with_inline_keyboard_and_callback(formatted_data)

updater = Updater(token=bot_token, use_context=True)
dispatcher = updater.dispatcher
dispatcher.add_handler(CallbackQueryHandler(button_callback))

updater.start_polling()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ID (–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
previous_incident_id = ""
def send_incident_events(chat_id, incident_id):
    incident_events = get_incident_events_by_id(incident_id)
    events_info = parse_incident_events_to_string(incident_events)
    send_message(events_info)

while True:
    api_response = make_api_request()

    if isinstance(api_response, dict) and 'incidents' in api_response and api_response['incidents']:
        current_incident_id = api_response['incidents'][0].get("id", "")

        if current_incident_id != previous_incident_id:
            formatted_data = format_incident(api_response['incidents'][0])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            send_message_with_inline_keyboard_and_callback(formatted_data)
            previous_incident_id = current_incident_id
    time.sleep(10)  # –ü–∞—É–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
updater.idle()